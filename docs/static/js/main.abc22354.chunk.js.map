{"version":3,"sources":["components/AddCategory.js","helper/getGifs.js","components/GiftGrid.js","hooks/useFetchGifs.js","GiftExpert.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_large","GiftGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","className","key","src","alt","GiftExpert","categories","c","ReactDOM","render","document","getElementById"],"mappings":"sLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACtBC,mBAAS,IADa,mBACzCC,EADyC,KAClCC,EADkC,KAYhD,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,IAExBR,GAAc,SAACS,GAAD,MAAU,CAACP,MACzBC,EAAS,OAKT,2BACEO,KAAK,OACLC,YAAY,YACZT,MAAOA,EACPU,SAfoB,SAACP,GAAD,OAAOF,EAASE,EAAEQ,OAAOX,Y,uBCNxCY,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,sDAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,gBAAgBZ,QAXhB,kBAedM,GAfc,4CAAH,sDCGPO,EAAW,SAAC,GAAkB,IAAhBf,EAAe,EAAfA,SAAe,ECAd,SAACA,GAAc,IAAD,EACdd,mBAAS,CAAEqB,KAAM,GAAIS,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAYxC,OATAC,qBAAU,WACRpB,EAAQC,GAAUoB,MAAK,SAACC,GACtBH,EAAS,CACPX,KAAMc,EACNL,SAAS,SAGZ,CAAChB,IAEGiB,EDX2BK,CAAatB,GAAjCa,EAD0B,EAChCN,KAAcS,EADkB,EAClBA,QAEtB,OACE,6BACE,wBAAIO,UAAU,sBAAsBvB,GACnCgB,GAAW,yCACZ,wBAAIO,UAAU,uBACXV,EAAOJ,KAAI,SAACC,GAAD,OACV,wBAAIc,IAAKd,EAAIC,IACX,yBAAKc,IAAKf,EAAIR,IAAKwB,IAAKhB,EAAIE,eEazBe,EAtBI,WAAO,IAAD,EACazC,mBAAS,CAAC,cADvB,mBAChB0C,EADgB,KACJ3C,EADI,KAOvB,OACE,6BACE,0CAEA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEC2C,EAAWnB,KAAI,SAACoB,GAAD,OACd,kBAAC,EAAD,CAAUL,IAAKK,EAAG7B,SAAU6B,S,MCfpCC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,U","file":"static/js/main.abc22354.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleValueChange = (e) => setValue(e.target.value);\r\n  const handlesubmit = (e) => {\r\n    e.preventDefault();\r\n    if (value.trim().length > 2) {\r\n      // setCategories((cats) => [...cats, value]);\r\n      setCategories((cats) => [value]);\r\n      setValue('');\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handlesubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        value={value}\r\n        onChange={handleValueChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&api_key=8RxFYU11Hi6cCjYEJuQipJJ9965BaHUT`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_large.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GiftGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"category__subtitle\">{category}</h3>\r\n      {loading && <p>Loading...</p>}\r\n      <ul className=\"Gifs__list fadeInUp\">\r\n        {images.map((img) => (\r\n          <li key={img.id}>\r\n            <img src={img.url} alt={img.title} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helper/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({ data: [], loading: true });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setstate({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GiftGrid } from './components/GiftGrid';\r\n\r\nconst GiftExpert = () => {\r\n  const [categories, setCategories] = useState(['Spiderman']);\r\n\r\n  // const handleAdd = () => {\r\n  //   setCategories([...categories, 'Batman']);\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      <h2>GiftExpert</h2>\r\n\r\n      <AddCategory setCategories={setCategories} />\r\n\r\n      <hr />\r\n\r\n      {categories.map((c) => (\r\n        <GiftGrid key={c} category={c} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GiftExpert;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpert from './GiftExpert';\nimport './index.css';\n\nReactDOM.render(<GiftExpert />, document.getElementById('root'));\n"],"sourceRoot":""}